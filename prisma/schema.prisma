// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  userId    String   @unique // Clerk user ID
  email     String
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile         UserProfile?
  voiceRecordings VoiceRecording[]

  @@map("users")
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique // Clerk user ID (references User.userId)
  country         String?   // Selected country
  languageDialect String?   // Selected language dialect
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_profiles")
}

model VoiceRecording {
  id              String    @id @default(cuid())
  userId          String    // Clerk user ID (references User.userId)
  blobUrl         String    // URL from Vercel Blob
  blobPathname    String    // Pathname from Vercel Blob for deletion
  transcript      String?   // Optional transcript of the recording
  duration        Int       // Duration in seconds
  languageDialect String?   // Selected language dialect for analysis
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user     User                    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  feedback VoiceRecordingFeedback?

  @@index([userId])
  @@map("voice_recordings")
}

model VoiceRecordingFeedback {
  id              String    @id @default(cuid())
  recordingId     String    @unique
  pronunciation   String    @db.Text
  grammar         String    @db.Text
  fluency        String    @db.Text
  vocabulary     String    @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relation to recording
  recording      VoiceRecording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@map("voice_recording_feedback")
}
